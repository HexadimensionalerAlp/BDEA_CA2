1. Auflisten der Posts, die von einem Account gemacht wurden, bzw. ihm zugeordnet wurden
export const getPostsOfUser = async (user: string) => {
  const cass = await cassandraClient.execute(
    `select content from posts_by_user where userid = ${user};`
  );
  var result: string = '';
  for (const row of cass.rows) {
    result += row.get(0) + "\n"; 
  }
  return result;
}

2. Finden der 100 Accounts mit den meisten Followern
export const getTop100mostFollowers = async () => {
  const neo = await neo4jClient.run(`match (u1:User)<-[:FOLLOWS]-(u2:User) return u1, 
                                     count(u2) as followers order by followers desc limit 100`
  );
  const map = new Map();
  //return neo.records[0];
  neo.records.forEach((node) => map.set(node.get(0).properties, node.get(1).low));
  return [...map.entries()];
}

3. Finden der 100 Accounts, die den meisten der Accounts folgen, die in 1) gefunden wurden
export const getTop100TopFans = async () => {
  //Ausgabearray
  var arr = new Array(0);
  const neo = await neo4jClient.run(
    `CALL { 
      match (u1:User)<-[:FOLLOWS]-(u2:User)
	    return u1, count(u2) as followers
		  order by followers desc limit 100
	  }
	  match (u3:User)-[:FOLLOWS]->(u1)
	  return u3, count(u1) as followingInTop100
	  order by followingInTop100 desc limit 100`
  );
  neo.records.forEach(function(element) {
    arr.push('NAME:'+element.get(0).properties.name+','+'ID:'+element.get(0).properties.id+','+
    'FOLLOWING ' + element.get(1) + ' PEOPLE IN TOP 100');
  });
  return arr;
}

4. Auflisten der Informationen für die persönliche Startseite eines beliebigen Accounts
//Abfrage 4  (1)
export const getProfileOfUser = async (user: string) => {
  //Ausgabearray
  var arr = new Array(0);
  //Abfrage, 4.1
  const neo = await neo4jClient.run(
    `match (u1:User {id: "${user}"})<-[:FOLLOWS]-(u2:User) return count(u2) as followers` 
  );
  arr.push('FOLLOWER COUNT:' + neo.records[0].get(0).low);

  //Abfrage, 4.2
  const neo2 = await neo4jClient.run(
    `match (u1:User {id: "${user}"})-[:FOLLOWS]->(u2:User) return count(u2) as following`
  )  
  arr.push('FOLLOWING ' + neo2.records[0].get(0).low + ' people');
  arr.push('TOP POSTS OF FOLLOWED PEOPLE:');
  
  //Abfrage 4.3
    //Abfrage, 4.3.1
    //Aus neo4j werden die top Posts der gefolgten Leute samt Likes ermittelt
    const neo3 = await neo4jClient.run(
      `match (u1:User {id: "${user}"})-[:FOLLOWS]->(u2:User) match (u2)-[:POSTS]->(p:Post)
       match l=()-[:LIKES]->(p) return u2, p.id, count(l) as likes order by likes desc limit 25`
    );
  
    //Die ermittelten postids werden in ein Array mit ihrer Ordnung (in neo4j) gepackt
    var arrCass = new Array(0);
    for (const record of neo3.records) {
      arrCass.push(record.get(1));
    }  

    //Mit jeder der geordneten ids wird ein select ausgeführt, der Ergbenistweet dann in ein neues Array gepackt
    var arrContent = new Array(0);
    for (const element of arrCass) {
      const content = await cassandraClient.execute('select content from posts_by_user where postid = ' + element +' ALLOW FILTERING;');
      arrContent.push(content.rows[0].get(0));
    }

    //Für jedes aus neo4j enthaltene Element werden gewisse Daten genommen, mit dem Ergbenis aus Cassandra vereint und in ein weiteres Array gepusht
    var i: number = 0;
    neo3.records.forEach(function(element) {
      arr.push('NAME:'+element.get(0).properties.name+','+'ID:'+element.get(0).properties.id+','+
      'POST:'+arrContent[i]+','+'LIKES:'+element.get(2).low);
      i++;
    });
  //Das finale Array wird ausgegeben
  return arr;//cass.rows;
}
//Abfrage 4 (2)
export const getProfileOfUser2 = async (user: string) => {
  //Ausgabearray
    var arr = new Array(0);
  //Abfrage, 4.1
  const neo = await neo4jClient.run(
    `match (u1:User {id: "${user}"})<-[:FOLLOWS]-(u2:User) return count(u2) as followers` 
  );
  arr.push('FOLLOWER COUNT:' + neo.records[0].get(0).low);

  //Abfrage, 4.2
  const neo2 = await neo4jClient.run(
    `match (u1:User {id: "${user}"})-[:FOLLOWS]->(u2:User) return count(u2) as following`
  )  
  arr.push('FOLLOWING ' + neo2.records[0].get(0).low + ' people');
  arr.push('NEWEST POSTS OF FOLLOWED PEOPLE:');

  //Abfrage 4.3
    //Abfrage 4.3.2
    //Aus neo4j werden die top Posts der gefolgten Leute mit Likes ermittelt, aber ohne Sortierung
    const neo3 = await neo4jClient.run(
      `match (u1:User {id: "${user}"})-[:FOLLOWS]->(u2:User) match (u2)-[:POSTS]->(p:Post)
        match l=()-[:LIKES]->(p) return u2, p.id, count(l) as likes`
    );
    var arrCass = new Array(0);
    for (const record of neo3.records) {
      arrCass.push(record.get(1));
    }

    //Herstellung des Parameters der IN-Operation in Cassandra
    var stringCass: string = '';
    for (const element of arrCass) {
      stringCass += element + ',';
    }
    stringCass = stringCass.slice(0, stringCass.length-1);

    //Cassandraabfrage zur Lieferung der contents geordnet nach Datum (Tuuid)
    const cass = await cassandraClient.execute('select userid, postid, content from posts_by_user where postid in (' + stringCass + ') limit 25 ALLOW FILTERING;')
    
    //Die ermittelten postids werden in ein Array mit ihrer Ordnung (in Cassandra) gepackt
    var arrCassPostId = new Array(0);
    for (const row of cass.rows) {
      arrCassPostId.push(row.get(1));
    }

    var arrCassPostContent = new Array(0);
    for (const row of cass.rows) {
      arrCassPostContent.push(row.get(2));
    }

    var arrCassPostUser = new Array(0);
    for (const row of cass.rows) {
      arrCassPostUser.push(row.get(0));
    }

    //Einzelne matches in neo4j, da die Ordnung dieses Mal von Cassandra vorgegeben wird
    var arrNeoUserName = new Array(0);
    var arrNeoLikes = new Array(0);
    for (const element of arrCassPostId) {
      const content = await neo4jClient.run(`match (p:Post {id: "`+element+`"}) match (u:User)-[:POSTS]->(p) match l=()-[:LIKES]->(p) return u, count(l)`);
      arrNeoUserName.push(content.records[0].get(0).properties.name);
      arrNeoLikes.push(content.records[0].get(1));
    }
  
    //Die geordneten Posts aus Cassandra werden mit den aus neo4j erhaltenen, geordneten Daten vereint im finalen array, das wird dann ausgegeben
    var i: number = 0;
    for(const row of cass.rows) {
      arr.push('NAME: '+arrNeoUserName[i]+'ID: '+arrCassPostUser[i]+'POST: '+arrCassPostContent[i]+'LIKES: '+arrNeoLikes[i]);
      //arr.push('NAME and ID:'+arrNeoUser[i]+', POST:'+arrCassPostContent[i]+', LIKES:'+arrNeoLikes[i]);
      i++;
    }
  return arr;
}

5. Fanout
timeline aktualisieren: match (u:User) where u.id = '${userId}' set u.timeline = '${newTimeline}';
timeline abfragen: match (n:User) where n.id = '${authorId}' return n;

6. Die sechste Abfrage haben wir zeitlich nicht mehr hinbekommen. Über Cassandra hätte man mit dem "like"-Operator
    die Spalte der Tweets absuchen müssen, dafür wäre eine SAI-Indexierung der Spalte notwendig gewesen, da Spalten
    in Cassandra ansonsten nicht über "like" durchsuchbar sind. Leider, wie gesagt, haben wir die Implementierung nicht mehr
    hinbekommen.